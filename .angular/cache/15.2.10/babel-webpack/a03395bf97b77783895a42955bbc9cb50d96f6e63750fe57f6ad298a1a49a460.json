{"ast":null,"code":"import { ModalDialogComponent } from './../../shared/modals/modalDialog/modalDialog.component';\nimport { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { take, exhaustMap, tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-bootstrap/modal\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./loading.service\";\nimport * as i4 from \"./auth.service\";\nexport let FirebaseService = /*#__PURE__*/(() => {\n  class FirebaseService {\n    constructor(bsModalService, http, loadingService, authService) {\n      this.bsModalService = bsModalService;\n      this.http = http;\n      this.loadingService = loadingService;\n      this.authService = authService;\n    }\n    getApi(url, functionName) {\n      return this.authService.user.pipe(take(1), exhaustMap(user => {\n        return this.http.get(url, {\n          params: new HttpParams().set('auth', user.token)\n        });\n      }), tap(() => console.log(functionName)), catchError(error => this.handleApiError(error)));\n    }\n    postApi(url, req, functionName) {\n      return this.authService.user.pipe(take(1), exhaustMap(user => {\n        return this.http.post(url, req, {\n          params: new HttpParams().set('auth', user.token)\n        });\n      }), tap(() => console.log(functionName)), catchError(error => this.handleApiError(error)));\n    }\n    deleteApi(url, functionName) {\n      return this.authService.user.pipe(take(1), exhaustMap(user => {\n        return this.http.delete(url, {\n          params: new HttpParams().set('auth', user.token)\n        });\n      }), tap(() => console.log(functionName)), catchError(error => this.handleApiError(error)));\n    }\n    updateApi(url, req, functionName) {\n      return this.authService.user.pipe(take(1), exhaustMap(user => {\n        return this.http.put(url, req, {\n          params: new HttpParams().set('auth', user.token)\n        });\n      }), tap(() => console.log(functionName)), catchError(error => this.handleApiError(error)));\n    }\n    /** 錯誤處理 */\n    handleApiError(error) {\n      console.error('API錯誤', error);\n      this.loadingService.hide();\n      this.modalRef = this.bsModalService.show(ModalDialogComponent, {\n        initialState: {\n          type: 'error',\n          message: error.message\n        }\n      });\n      return throwError('發生錯誤');\n    }\n    static #_ = this.ɵfac = function FirebaseService_Factory(t) {\n      return new (t || FirebaseService)(i0.ɵɵinject(i1.BsModalService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.LoadingService), i0.ɵɵinject(i4.AuthService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FirebaseService,\n      factory: FirebaseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return FirebaseService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}