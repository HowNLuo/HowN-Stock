{"ast":null,"code":"import { catchError, tap } from 'rxjs/operators';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { User } from './../../auth/user.modal';\nimport { ModalDialogComponent } from './../../shared/modals/modalDialog/modalDialog.component';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./loading.service\";\nimport * as i3 from \"ngx-bootstrap/modal\";\nimport * as i4 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, loadingService, bsModalService, router) {\n      this.http = http;\n      this.loadingService = loadingService;\n      this.bsModalService = bsModalService;\n      this.router = router;\n      this.user = new BehaviorSubject(null);\n    }\n    /** 註冊 */\n    signUp(email, password) {\n      const req = {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      };\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${environment.firebaseAPIKey}`, req).pipe(tap(() => console.log('signUp')), tap(res => this.handleAuthentication(res.email, res.localId, res.idToken, +res.expiresIn)), catchError(error => this.handleApiError(error)));\n    }\n    /** 登入 */\n    login(email, password) {\n      const req = {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      };\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.firebaseAPIKey}`, req).pipe(tap(() => console.log('login')), tap(res => this.handleAuthentication(res.email, res.localId, res.idToken, +res.expiresIn)), catchError(error => this.handleApiError(error)));\n    }\n    /** 登出 */\n    logout() {\n      this.user.next(null);\n      this.userId = '';\n      this.router.navigate(['/auth']);\n      localStorage.removeItem('userData');\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n      ;\n      this.tokenExpirationTimer = null;\n    }\n    /** 自動登入 */\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n      if (!userData) {\n        return;\n      }\n      ;\n      const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n        this.userId = loadedUser.id;\n        // 重新登入，需設定有效時間\n        const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expirationDuration);\n      }\n      ;\n    }\n    /** 自動登出(設定有效時間) */\n    autoLogout(expirationDuration) {\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.logout();\n        this.modalRef = this.bsModalService.show(ModalDialogComponent, {\n          initialState: {\n            type: 'alert',\n            message: '登入時效到期，請重新登入。'\n          }\n        });\n      }, expirationDuration);\n    }\n    /** 身份驗證處理 */\n    handleAuthentication(email, localId, idToken, expiresIn) {\n      // 有效時間\n      const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const user = new User(email, localId, idToken, expirationDate);\n      this.user.next(user);\n      this.userId = localId;\n      this.autoLogout(expiresIn * 1000);\n      localStorage.setItem('userData', JSON.stringify(user));\n    }\n    /** 錯誤處理 */\n    handleApiError(error) {\n      console.error('API錯誤', error);\n      this.loadingService.hide();\n      this.modalRef = this.bsModalService.show(ModalDialogComponent, {\n        initialState: {\n          type: 'error',\n          message: error.error.error.message\n        }\n      });\n      return throwError('發生錯誤');\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoadingService), i0.ɵɵinject(i3.BsModalService), i0.ɵɵinject(i4.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}